from Wavefronts import *
from Storage import *
import os

version = 0.01

print('\nHello, ' + os.getlogin() + '! How are you doing today?')
print(f'\n \nThis is WAVEFRONT BUCK ANALYSIS v{version} !')

print("===============================================")
print("===============================================")
About_Network()
print('\nLets analyze some wavefronts !!!')
print("===============================================")
print("=============================================== \n \n")

#Intiate ON and OFF Wavefornt

Storage_Voltage_Active.append(Wavefront_Source(Voltage_Souce_Magnitude,0,Voltage_Source_Period_On,0))
Storage_Voltage_Active.append(Wavefront_Source(-Voltage_Souce_Magnitude,Voltage_Source_Period_On,Voltage_Source_Period_On + Voltage_Source_Period_Off,0))

#Populate Array with 1 ON OFF CYCLE
print("=== VOLTAGE INFO ===")

Storage_Voltage_Active[0].about()
Storage_Voltage_Active[1].about()

#Generate Wavefronts from ON
temp_wavefront = Storage_Voltage_Active[0]
temp_wavefront.Generate(Storage_Inductor_Active,Storage_Capacitor_Active)

Storage_Voltage_Completed.append(temp_wavefront)
Storage_Voltage_Active.remove(temp_wavefront)

print("\n=== Wavefronts Generated By HIGH ===")

Storage_Inductor_Active[0].about()
Storage_Capacitor_Active[0].about()

#Generate Wavefronts from OFF
temp_wavefront = Storage_Voltage_Active[0]
temp_wavefront.Generate(Storage_Inductor_Active,Storage_Capacitor_Active)

Storage_Voltage_Completed.append(temp_wavefront)
Storage_Voltage_Active.remove(temp_wavefront)

print("\n=== Wavefronts Generated By LOW ===")

Storage_Inductor_Active[1].about()
Storage_Capacitor_Active[1].about()

#Generate Wavefronts in Inductor for 1 Cycle

while len(Storage_Inductor_Active) > 0 :
    temp_wavefront = Storage_Inductor_Active[0]
    temp_wavefront.Generate(Storage_Inductor_New,Storage_Capacitor_New)

    Storage_Inductor_Completed.append(temp_wavefront)
    Storage_Inductor_Active.remove(temp_wavefront)

print(f"size of Inductor array New : {len(Storage_Inductor_New)}")
Storage_Inductor_New[0].about()
Storage_Inductor_New[1].about()

#Generate Wavefronts in Capacitor for 1 Cycle

while len(Storage_Capacitor_Active) > 0 :
    temp_wavefront = Storage_Capacitor_Active[0]
    temp_wavefront.Generate(Storage_Inductor_New,Storage_Capacitor_New)

    Storage_Capacitor_Completed.append(temp_wavefront)
    Storage_Capacitor_Active.remove(temp_wavefront)

print(f"size of Capacitor array New : {len(Storage_Capacitor_New)}")
Storage_Capacitor_New[0].about()
Storage_Capacitor_New[1].about()